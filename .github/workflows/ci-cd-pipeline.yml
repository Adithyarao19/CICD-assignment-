name: CI/CD Pipeline for Python Web App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: python-web-app
  ECS_CLUSTER: python-web-app-cluster
  ECS_SERVICE: python-web-app-service
  RESOURCE_PREFIX: python-web-app

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt

      - name: Run tests
        run: |
          cd app
          python -m pytest tests/ -v

  build-and-deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: windows-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} \
          || aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Create ECS cluster if it doesn't exist
        run: |
          aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --region ${{ env.AWS_REGION }} \
          || aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Check if ECS service exists and create if needed
        id: check-ecs-service
        run: |
          if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }}; then
            echo "service_exists=true" >> $GITHUB_OUTPUT
          else
            echo "service_exists=false" >> $GITHUB_OUTPUT
            echo "ECS service does not exist, will require manual setup"
          fi

      - name: Download task definition if exists
        if: steps.check-ecs-service.outputs.service_exists == 'true'
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.RESOURCE_PREFIX }} --region ${{ env.AWS_REGION }} --query taskDefinition > task-definition.json

      - name: Create basic task definition if it doesn't exist
        if: steps.check-ecs-service.outputs.service_exists == 'false'
        run: |
          echo '{
            "family": "python-web-app",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::'$(aws sts get-caller-identity --query Account --output text)':role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "python-web-app",
                "image": "${{ steps.build-image.outputs.image }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 5000,
                    "hostPort": 5000,
                    "protocol": "tcp"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/python-web-app",
                    "awslogs-region": "us-east-1",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }' > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.RESOURCE_PREFIX }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Register task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition.json --region ${{ env.AWS_REGION }}

      - name: Deploy to ECS only if service exists
        if: steps.check-ecs-service.outputs.service_exists == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Warning if service doesn't exist
        if: steps.check-ecs-service.outputs.service_exists == 'false'
        run: |
          echo "::warning::ECS service does not exist. Manual setup required."
          echo "Please create the ECS service with the following task definition:"
          cat task-definition.json
